#include<iostream>
#include<stdlib.h>
#include<time.h>
using namespace std;
/
void swap(int arr[],int i, int j)
{
    int temp = arr[i];
    arr[i] = arr[j];
    arr[j] = temp;
}

void QuickSort(int arr[],int L,int R)
{
    if(L==R)
        return;
    int less = L-1;
    int more = R;  //=R 表示取最后一个数作为pivot
    int cur=L;
    while(cur<more)
    {
        if(arr[cur]<arr[R]){
            swap(arr,++less,cur++);
        }

        else if(arr[cur]>arr[R]){
            swap(arr,--more,cur);
        }
        else{
            cur++;
        }
    }
    swap(arr,more,R);

    QuickSort(arr,L,less);
    QuickSort(arr,more+1,R);


}

void QuickSort2(int arr[],int L,int R)
{
    if(L=R)  //或者 if (L>=R)
        return;
    int pivot = arr[R];
    int less=L-1;
    int cur = L;
    while(cur<R){
        if(arr[cur]<pivot)
            swap(arr,++less,cur++);
        else
            cur++;
    }
    swap(arr,less+1,R);

    QuickSort2(arr,0,less);
    QuickSort2(arr,less+2,R);
}

void QuickSort3(int iArray[],int left, int right)
{
    //快速排序之前先判断一下当前待排序数组元素个数是不是大于1 否则就没有必要排序
    if (left >= right)
    {
        //直接退出排序代码  没有必要进行排序了
        return;
    }

    //开始进行快排算法
    //首先我们先保存left索引对应的数据  当前数据作为切割数组的轴
    int piovt = iArray[left];

    //定义临时变量保存数组2端的索引
    int leftIndex = left;
    int rightIndex = right;

    while (leftIndex < rightIndex)
    {
        //现在我们通过循环从右边开始搜索一个比轴值小的数据
        while (leftIndex < rightIndex)
        {
            //如果右边的数大于当前的参数轴值
            if (piovt <= iArray[rightIndex])
            {
                //右端索引指示器左移
                rightIndex--;
            }
            else
            {
                //说明我们右端出现比轴值更大的数据
                //这个时候我们就可以把这个更大的数据填充到索引轴索引对应的地方
                iArray[leftIndex] = iArray[rightIndex];
                leftIndex++;
                //我们需要跳出循环了当前工作完毕
                break;
            }
        }
        //从左边开始搜索一个比轴值更大的数填写上次留下的坑
        while (leftIndex < rightIndex)
        {
            //如果左边的数据小于轴值 我们索引指示器就往右走
            if (piovt >= iArray[leftIndex])
            {
                leftIndex++;
            }
            else
            {
                //说明我们在左端找到了比轴值更大的数据
                iArray[rightIndex] = iArray[leftIndex];
                rightIndex--;
                break;
            }
        }
    }
    iArray[leftIndex] = piovt;

    QuickSort3(iArray, left, leftIndex - 1);
    QuickSort3(iArray, rightIndex + 1, right);
}


int main()
{
    int arr[]={2,5,7,8,7,4,11,9,7};
    int size = sizeof(arr)/sizeof(int);
    cout<<"size = "<<size<<endl;
    QuickSort2(arr,0,size-1);
    for(int i=0;i<size;i++)
        cout<<arr[i]<<'\t';
    cout<<endl;
}
