#include<iostream>
#include<vector>
using namespace std;
/*
v.insert()
v.push_back()
v.pop_back()
v.begin()
v.end()    指向v的最后一个元素的下一个位置
v.size()
vector<int>::iterator iter
v.assign(3,0)  // v={0,0,0}
v7.assign(v6.begin(), v6.end())
*/
int main()
{
    vector<int> vec;
    vec.push_back(1);
    vec.push_back(2);
    vec.push_back(3); //[1,2,3]
    vec[1] = 3;
    vec[2] = 5;
    for (int i = 0; i<vec.size();i++)
    {
        cout<<vec[i]<<' ';
    }
    cout<<endl<<"after pop_back"<<endl;
    vec.pop_back();
    for (int i = 0; i<vec.size();i++)
    {
        cout<<vec[i]<<' ';
    }


	//插入元素
	cout << "********插入元素********" << endl;
	vector<int> v4;
	v4.push_back(1);//尾部插入
	for (vector<int>::iterator iter = v4.begin(); iter != v4.end(); iter++)
	{
		cout << *iter << " ";
	}
	cout << endl;
	v4.insert(v4.begin(), 0);//指定位置插入
	v4.insert(v4.begin(), 4, 3);//指定位置插入4个3
	for (vector<int>::iterator iter = v4.begin(); iter != v4.end(); iter++)
	{
		cout << *iter << " ";
	}
	cout << endl;
	v4.insert(v4.end(),v4.begin(), v4.end());;//连接两个v4
	for (vector<int>::iterator iter = v4.begin(); iter != v4.end(); iter++)
	{
		cout << *iter << " ";
	}
	cout<<endl<<v4.end()-v4.begin();

	//删除元素
	cout << "********删除元素********" << endl;
	v4.erase(v4.begin());//删除指定位置元素
	v4.erase(v4.begin(), v4.end());//指定删除区间
	cout << v4.size() << endl;
	v4.clear();//清空
	//访问
	cout << "********访问元素********" << endl;
	vector<int> v5;
	v5.push_back(0);
	cout << v5[0] << endl;//A
	cout << v5.at(0) << endl;//B
	// 如果v5非空，A行和B行没有任何区别。如果v为空，B行会抛出std::out_of_range异常，A行的行为未定义。如果需要进行下标检查，使用at

	//assign分配
	cout << "******验证assign******" << endl;
	vector<int> v6(4, 0);
	vector<int> v7;
	v7.assign(3, 4);//指定分配
	for (vector<int>::iterator iter = v7.begin(); iter != v7.end(); iter++)
	{
		cout << *iter << " ";
	}
	cout << endl;
	v7.assign(v6.begin(), v6.end());//用另一个vector进行分配
	for (vector<int>::iterator iter = v7.begin(); iter != v7.end(); iter++)
	{
		cout << *iter <<" ";
	}
	cout << endl;


    return 0;
}
