//超时  完成到134/136 很烦
//更新：思路是对的，基本代码也是正确的，进行小修改即可通过（直接复制别人代码上去就是通过，代码基本一样）
class Solution {
public:
    int longestIncreasingPath(vector<vector<int>>& matrix) {
        if(matrix.size()==0||matrix[0].size()==0)
            return 0;
        int m = matrix.size();
        int n = matrix[0].size();  //m行数，n列数  0~m-1;0~n-1
        int res=1;
        vector<vector<int> > dp(m, vector<int>(n, 0)); 
        //二维数组dp默认为0，若有非零值则表示已经算过了，知道从该点出发的最长路径
        for(int i=0;i<m;i++)
            for(int j=0;j<n;j++)
                res = max(res,dfs(matrix,dp,i,j));
        return res;
    }
    int dfs(vector<vector<int>> &matrix, vector<vector<int>> &dp, int i, int j)
    {
        if(dp[i][j]) return dp[i][j];
        int mx=1;
        for(int count = 0;count<4;count++)
        {
            int x = i+row[count];
            int y = j+col[count];
            if(x>=0&&x<matrix.size()&&y>=0&&y<matrix[0].size()&&matrix[i][j]<matrix[x][y])
            {
                mx = max(mx,1+dfs(matrix,dp,x,y));
            }
        }
        return mx;
    }
private:
    int row[4] = {-1,1,0,0};
    int col[4] = {0,0,-1,1};
};
