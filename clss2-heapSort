#include<iostream>
#include<stdlib.h>
#include<algorithm>
#include<time.h>
using namespace std;

void swap(int arr[],int i, int j)
{
    int temp = arr[i];
    arr[i] = arr[j];
    arr[j] = temp;
}

void heapInsert(int arr[],int index)  //把索引为index的元素与0~index构成的数组 形成大根堆
{
    while(arr[index]>arr[(index-1)/2])  //arr[0]与arr[(0-1)/2]是同一个数
    {
        swap(arr,index,(index-1)/2);
        index = (index-1)/2;
    }
}

void heapify(int arr[],int index,int size)  //arr[0]-arr[size-1]是一个大根堆
{
    int left = 2*index+1;
    while(left<size)
    {
        int largest = (left+1)<size && arr[left]<arr[left+1] ? left+1 : left ;
        largest = arr[largest] > arr[index]? largest : index;
        if(largest == index)
            break;
        swap(arr,index,largest);  //largest != index
        index = largest;
        left = index*2+1;
    }
}

void heapSort(int arr[],int size)
{
    //cout<<"size = "<<size<<endl;
    if(size<2)
        return;
    for(int i = 0;i<size;i++)   //形成大根堆
        heapInsert(arr,i);
    //对arr整个来讲已经是一个大根堆了
    swap(arr,0,--size);
    while(size>0){
        heapify(arr,0,size);
        swap(arr,0,--size);
    }

}
void Comparator(int arr[], int size) {
	sort(arr, arr + size); //在algorithm库里
}

int* generatorRandomArray(int size, int maxValue) {
	int* arr = new int[size];
	for (int i = 0;i < size;i++) {
		arr[i] = rand() % maxValue - rand() % (maxValue - 1);
	}
	return arr;
}

int* copyArray(int arr[], int size) {
	int* newArray = new int[size];
	for (int i = 0;i < size;i++) {
		newArray[i] = arr[i];
	}
	return newArray;
}

bool isEqual(int arr1[], int arr2[], int size) {
	for (int i = 0;i < size;i++) {
		if (arr1[i] != arr2[i])
			return false;
	}
	return true;
}

void printArray(int arr[], int size) {
	for (int i = 0;i < size;i++) {
		cout << arr[i] << " ";
	}
	cout << endl;
}

int main() {
	int testTime = 5000;
	int maxSize = 100;
	int maxValue = 100;
	bool succeed = true;
	for (int i = 0;i < testTime;i++) {
		int size = rand() % maxSize;
		int *arr1,*arr2;
		arr1 = generatorRandomArray(size, maxValue);
		//printArray(arr1, size);
		arr2 = copyArray(arr1, size);
		//printArray(arr2, size);
		//SelectionSort(arr1, size);
		//BubbleSort(arr1,size);
		//InsertSort(arr1,size);
		//mergeSort(arr1,size);
		heapSort(arr1,size);
		Comparator(arr2, size);
		if (!isEqual(arr1, arr2, size)) {
			succeed = false;
			printArray(arr1, size);
			printArray(arr2, size);
			break;
		}
		//觉得应该需要
		delete[] arr1,arr2;
	}
	if (succeed)
		cout << "Nice!" << endl;
	else
		cout << "Fucking!" << endl;
	system("pause");
	return 0;
}



//
//
//int main() {
//    int arr[] = {3,5,2,2,7,4};
//    int size = sizeof(arr)/sizeof(int);
//    //heapInsert(arr,1);
//    heapSort(arr,size);
//    for(int i=0;i<size;i++)
//        cout<<arr[i]<<'\t';
//    cout<<endl;
//}
