#include<string>
#include<iostream>
#include<stack>
using namespace std;
void reverseStack(stack <int> &s);
void printStack(stack<int> &st);

int main()
{
	stack<int> st;
	// 产生一个堆栈st，由下至上的元素分别为0,1,2,3,4,
	cout << "入栈：";
	for (int i = 0; i <5; i++)
	{
		st.push(i);
		cout << i << " ";
	}
	cout << endl;
	cout<<"size = "<<st.size()<<endl;
	//反转
	// 依次弹出堆栈中的元素并显示，分别为4,3,2,1,0
	cout << "出栈：";
	printStack(st);
	cout << "入栈：";
	for (int i = 0; i <5; i++)
	{
		st.push(i);
		cout << i << " ";
	}
	cout << endl;
	reverseStack(st);
	cout << "反转：";
	printStack(st);  //如果没反转还是 43210，现在输出为01234
    return 0;
}
void reverseStack(stack <int> &s)
{

	// 首先处理递归的的停止条件，及堆栈中只有一个元素的情况
	if (s.empty())
		return;
	else {
		//如果s里面只有一个元素，就返回，否则就不返回。
		//具体实现是先pop出来一个，判断剩下的是不是空栈。
		int a = s.top();
		s.pop();
		if (s.empty()){
			s.push(a);
			return;
		}
		else{
			s.push(a);
		}
	}

	// 其他情况
	int temp1 = s.top();
	s.pop();
	reverseStack(s);
	int temp2 = s.top();
	s.pop();
	reverseStack(s);
	s.push(temp1);
	reverseStack(s);
	s.push(temp2);
}
void printStack(stack<int> &st)
{
	while (!st.empty())
	{
		cout << st.top() << " ";
		st.pop();
	}
	cout << endl;
}
