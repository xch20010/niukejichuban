#include <iostream>
#include <algorithm>
#include <stdlib.h>  //可以不加
using namespace std;

void swap(int arr[], int i, int j) {
	int temp = arr[i];
	arr[i] = arr[j];
	arr[j] = temp;
}

void SelectionSort(int arr[], int size) {
	for (int i = 0;i < size;i++) {
		int minIndex = i;
		for (int j = i + 1;j < size;j++) {
			if (arr[j] < arr[minIndex])
				minIndex = j;
		}
		swap(arr, i, minIndex);
	}
}
/////////////////归并排序
void merge(int arr[], int left, int right) {
    int* buf = new int[right-left+1];
    int mid = left + ((right-left) >> 1);
    int i = 0;
    int p1 = left, p2 = mid+1;  //相当于指向[left,mid] 和[mid+1,right]的两个数组的两个指针
    while(p1<=mid && p2<=right)
    {
        buf[i++] = arr[p1]<arr[p2]? arr[p1++]: arr[p2++] ; //i++ 表示先对i操作，再i=i+1
    }
    //p1或者p2 必有一个越界
    while(p1<=mid)
    {
        buf[i++] = arr[p1++];
    }
    while(p2<=right)
    {
        buf[i++] = arr[p2++];
    }
    for( i = 0; i<right-left+1;i++)
        arr[left+i] = buf[i];
    delete []buf;
}
void mergeSortProcess(int arr[], int left, int right) {
	if (left == right)
		return;
	int mid = left+((right-left)>>1);
	mergeSortProcess(arr, left, mid);
	mergeSortProcess(arr, mid + 1, right);
	merge(arr, left, right);
}

void mergeSort(int arr[], int size) {
	int left = 0;
	int right = size - 1;
	if(left<=right)
		mergeSortProcess(arr, left, right);
}
/////////////////////////冒泡排序
void BubbleSort(int arr[],int size)
{
    if(size<=1)
        return;
    for(int end = size-1;end>0;end--)
        for(int i=0;i<end;i++)
        {
            if(arr[i]>arr[i+1])
                swap(arr,i,i+1);
        }
}
////////////插入排序
void InsertSort(int arr[],int size)
{
    for(int i=1;i<size;i++)
        for(int j=i-1;j>=0;j--)
    {
        if(arr[j]>arr[j+1])
            swap(arr,j,j+1);
    }
}


void Comparator(int arr[], int size) {
	sort(arr, arr + size); //在algorithm库里
}

int* generatorRandomArray(int size, int maxValue) {
	int* arr = new int[size];
	for (int i = 0;i < size;i++) {
		arr[i] = rand() % maxValue - rand() % (maxValue - 1);
	}
	return arr;
}

int* copyArray(int arr[], int size) {
	int* newArray = new int[size];
	for (int i = 0;i < size;i++) {
		newArray[i] = arr[i];
	}
	return newArray;
}

bool isEqual(int arr1[], int arr2[], int size) {
	for (int i = 0;i < size;i++) {
		if (arr1[i] != arr2[i])
			return false;
	}
	return true;
}

void printArray(int arr[], int size) {
	for (int i = 0;i < size;i++) {
		cout << arr[i] << " ";
	}
	cout << endl;
}

int main() {
	int testTime = 5000;
	int maxSize = 100;
	int maxValue = 100;
	bool succeed = true;
	for (int i = 0;i < testTime;i++) {
		int size = rand() % maxSize;
		int *arr1,*arr2;
		arr1 = generatorRandomArray(size, maxValue);
		//printArray(arr1, size);
		arr2 = copyArray(arr1, size);
		//printArray(arr2, size);
		//SelectionSort(arr1, size);
		//BubbleSort(arr1,size);
		InsertSort(arr1,size);
		//mergeSort(arr1,size);
		Comparator(arr2, size);
		if (!isEqual(arr1, arr2, size)) {
			succeed = false;
			printArray(arr1, size);
			printArray(arr2, size);
			break;
		}
		//觉得应该需要
		delete[] arr1,arr2;
	}
	if (succeed)
		cout << "Nice!" << endl;
	else
		cout << "Fucking!" << endl;
	system("pause");
	return 0;
}
